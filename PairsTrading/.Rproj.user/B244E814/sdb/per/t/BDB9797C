{
    "contents" : "load.library <- function(package_name) {\n  package_name <- as.character(match.call()[[2]])\n  if (!require(package_name, character.only = T)) {\n    install.packages(package_name)\n    require(package_name)\n  }\n}\n####### FUNCTION DEFINITIONS #######\n\nload.library(\"plyr\")\nload.library(\"foreach\")\nload.library('doParallel')\nload.library(\"ggplot2\")\nload.library(\"tseries\")\nload.library(\"xts\")\nload.library('quantmod')\nload.library(\"PerformanceAnalytics\")\nload.library(\"assertthat\")\nload.library('mongoquery')\nsource(\"func.R\")\nsource(\"Cointegration.R\")\nsource(\"PairTrading.R\")\nsource(\"Signal.R\")\n\nself <- list()\nself$day <- double()    #当前日期\n#self$price.pair <- NA  #配对价格\nself$sample <- NA       #测试集\nself$signals <- NA      #保存开仓信号\nself$weight <- NA       #beta\nself$zscore <- NA       #zscore\n#self$in.sample <- NA   #测试集合\n#self$out.sample <- NA  #验证集合\n\n#status define\nOPENED <- 0\nCLOSED <- 1\nTERMINAL <- 2\n\nself$assets.id = array(dim = 2,dimnames = c(\"Left\",\"Right\"))\n\ninit <- function(assets,bExploratio) {\n  self$assets.id <<- assets\n  date.duration <- c(as.POSIXct('2000-01-04'), as.POSIXct('2016-02-04'))\n  \n  print(assets)\n  print(date.duration)\n  \n  price.pair <- GetAssetsData('CFETS', self$assets.id, date.duration)\n  sample.num <- nrow(price.pair)\n  in.sample <- price.pair[1:round(sample.num*2/3),]\n  out.sample <- price.pair[(round(sample.num*2/3) + 1):sample.num,]\n  \n  if (bExploratio) {\n    self$sample <<- in.sample\n  }\n  else{\n    self$sample <<- out.sample\n  }\n}\n\n#初始化每次epeson\ns0 <- function(beginDay)\n{\n  self$day <<- beginDay\n  self$signals <<-\n    xts(array(NA, dim = nrow(self$sample)), order.by = index(self$sample))\n  self$zscore <<-\n    xts(array(NA, dim = nrow((self$sample))), order.by = index(self$sample))\n  num.price <- nrow(self$sample)\n  self$weight <<-\n    xts(data.frame(p1 = rep(0, num.price), p2 = rep(0, num.price)), order.by = index(self$sample))\n  \n}\n\n\n# Inputs:\n#   s: state, represented by an array of integers\n#   s[1] 0\n#   s[2] 0\n#   s[3] == 1,end;\n#   a: action\n#    a[1] esimate period\n#    a[2] entryZscore\n#    a[3] stoplossZscore\n#    a[4] trading window\n# output:\n# list of:\n#   new state\n#   reward\n\n.step <- function(context, status, a)\n{\n  # if terminal state, exit gracefully\n  if (status[1] == OPENED)\n    return(list(status,0))\n  \n  # both new state and reward will be returned\n  zScore.pre <- 0\n  new.s <- status\n  reward <- 0L\n  \n  oldSignal <- 0\n  \n  #parameter setting\n  params.period <- a[1]\n  params.tradingwindow <- a[2]\n  params.entryZscore <- a[3]\n  params.stoplossZscore <- a[4]\n  params.exitZscore <- 0\n  \n  openDay <- 0\n  \n  #lastday <- s[0]\n  #setpDone <- F\n  num.days <- nrow(context$sample)\n  \n  while (context$day <= num.days) {\n    rolldayPrice <-\n      context$sample[(context$day - params.period + 1):context$day,]\n    reg <- EstimateParameters(rolldayPrice, method = lm)\n    #browser()\n    meanSpread <- mean(na.omit(reg$spread))\n    stdSpread <- sd(na.omit(reg$spread))\n    \n    zScore <- (reg$spread - meanSpread) / stdSpread\n    zScore.last <- last(zScore)\n    context$zscore[index(zScore.last)] <- zScore.last\n    \n    signal <- DaySignal(zScore.last, zScore.pre, params.entryZscore, params.stoplossZscore)\n    zScore.pre <- zScore.last\n    # exceed trading window, close position\n    if (oldSignal != 0 &&\n        (is.na(signal) ||\n         signal == oldSignal) &&\n        (context$day - openDay) >= params.tradingwindow) {\n      signal <- 0\n    }\n    \n    if (!is.na(signal)) {\n      #browser()\n      context$signals[index(zScore.last)] <- signal\n    }\n    # open position\n    if (!is.na(signal) && signal != oldSignal && signal != 0) {\n      #browser()\n      status[1] <- OPENED\n      openDay <-  context$day\n      weight <- HedgeRatio2Weight(reg$hedge.ratio)\n    }\n    if (!is.na(signal) && signal != oldSignal && signal == 0) {\n      #browser()\n      context$day <- context$day + 1\n      status[1] <- CLOSED\n      # reward\n      window.current <- context$day - openDay + 1\n      effect.price <- context$sample[openDay:context$day, ]\n      price.return <- na.omit(Return.calculate(effect.price))\n      weights <- xts(matrix(rep(weight*c(-oldSignal, oldSignal), each = window.current), nrow = window.current), order.by = index(effect.price))\n      portfolio.return <- Return.portfolio(price.return, weights = lag(weights), geometric = F)\n      context$weight[index(weights),] <- weights\n      reward <- round(SortinoRatio(portfolio.return),4)\n      #browser()\n      # print(reward)\n      if (reward[1] == Inf) {\n        reward[1] = 0\n      }\n      return(list(context,new.s,reward[1]))\n    }\n    if (!is.na(signal))\n      oldSignal <- signal\n    \n    context$day <- context$day + 1\n  }\n  # at last close all position\n  if (oldSignal != 0)\n    context$signals[context$day - 1] <- 0\n  new.s[1] <- TERMINAL\n  #browser()\n  # whole reward\n  return(list(context,new.s,reward))\n}\n\n\n# Inputs:\n#   s: state\n#   s[0]:\n#       0:OPENED\n#       1:CLOSED\n#       2:TERMINAL\n#   a: action\n#    a[1] esimate period\n#    a[2] trading window\n#    a[3] entryZscore\n#    a[4] stoplossZscore\n# output:\n# list of:\n#   new state\n#   reward\n\nstep <- function(status, a)\n{\n  ret = .step(self,status,a)\n  self <<- ret[[1]]\n  return(c(ret[[2]][1],ret[[3]][1]))\n}\n\nshowDomain <- function()\n{\n  signals <- na.omit(na.locf(self$signals))\n  PlotWithSignal(self$zscore, signals, 1.6, 0, 10)\n  \n  price.return <- Return.calculate(self$sample)\n  portfolio.return <- Return.portfolio(na.omit(price.return), weights = lag(self$weight), geometric = F)\n  charts.PerformanceSummary(portfolio.return)\n}\n.save <- function()\n{\n  f_continue <- function(prompt = \"Do you want to save the result? (y/n)\") {\n    \n    n <- readline(prompt=prompt)\n    n <- as.character(n)\n    if (n == 'y')\n      return( TRUE )\n    else\n      return( FALSE )\n  }\n  if (f_continue()) {\n    save(self, file='result.RData')\n  }\n}\n.load <- function()\n{\n \n  load('result.RData')\n  return (self)\n}\n\nmain <- function(){\n  assets.id <- c('GZ3Y', 'GZ5Y')\n  init(assets.id,TRUE)\n  s0(190)\n  status <- c(CLOSED)\n  a <- c(150,150,1.6,10)\n  #trace(.step, exit = quote(if (reward[1] == Inf) browser()))\n  while (status[1] != TERMINAL) {\n    # performing step\n    \n    tmp <- step(status, a)\n    status <- tmp[1]\n    r <- tmp[2]\n    print(c(status[1],self$day - 1, self$signals[self$day - 1],self$zscore[self$day - 1],r))\n  }\n  print(c(status[1],self$day - 1, self$signals[self$day - 1],self$zscore[self$day - 1]))\n  showDomain()\n  .save()\n}\n",
    "created" : 1456598186538.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2217217660",
    "id" : "BDB9797C",
    "lastKnownWriteTime" : 1456648784,
    "path" : "D:/百度云/My Box Files/SAIF/论文/2016/Code/PairsTradingForRLWK0.2/Script.R",
    "project_path" : "Script.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : true,
    "type" : "r_source"
}