{
    "contents" : "#load library\n#library(PairTrading)\nlibrary(\"tseries\")\nlibrary(\"xts\")\nlibrary(PerformanceAnalytics)\nsource(\"Cointegration.R\")\nsource(\"PairTrading.R\")\nsource(\"Signal.R\")\n#load sample stock price data\nload(\"stock.price.rda\")\n\n#select 2 stocks\nprice.pair <- stock.price[,1:2][\"2006-1-03::\"]\n\nparams.period.init <- 150\nparams.entryZscore.init <- 1.5\nparams.exitZscore.init <- 0\nparams.stoplossZscore.init <- 5.0\nday <<- params.period.init\ns[0] <- day #s[0]表明lastday\n#########################\n# run codes below every time\na <- c(params.period.init, params.entryZscore.init, params.exitZscore.init, params.stoplossZscore.init)\npair.len <- nrow(price.pair) - params.period.init + 1\n# trade signals\nsignals <<- xts(rep(NA, pair.len), order.by = index(price.pair[params.period.init:nrow(price.pair), ]))\n# total zscore\npair.zscore <<- vector(mode = 'numeric', length = nrow(price.pair) - params.period.init + 1)\n# Set Parameter Function\n#s[0] <- s[0] + 1\nSetp(price.pair, 0, a)\n#########################\n\nrollwindow <- function(max) return (150)\n\nApplied <- function(price.pair){\n  #如果开仓，选择新的rollwindow, 继续roll,return 0\n  \n  #如果不开不平，继续roll，return 0\n  \n  #如果平仓，return 上一个阶段的Sortino Ratio\n  l <- ndays(price.pair)\n  w <- rollwindow(params.maxperiod)\n  day <<-  day +1\n  print(paste(\"day\" ,day, sep =    \"\"))\n  reg <- EstimateParameters(price.pair[l - w:l], method = lm)\n  #meanSpread <- mean(na.omit(reg$spread))\n#  stdSpread <- sd(na.omit(reg$spread))\n  \n#  zScore = (params$spread - meanSpread) / stdSpread\n  signal <- SignalWithZscore(zScore, params.entryZscore)\n  c(spread = as.numeric(last(reg$spread)), hedge.ratio = reg$hedge.ratio, premium = reg$premium)\n}\nday <<- 0\nparams <- as.xts(rollapplyr(price.pair, params.maxperiod, Applied, by.column = FALSE))\n\n# for (day in seq(100,ndays(price.pair))) {\n# \tparams.period <- ifelse(params.period < day, params.period, day - 1)\n# \treg <- EstimateParameters(price.pair[(day - params.period):day],method = lm)\n# \treg.df[end(reg$spread)] <- c(end(reg$spread),as.numeric(last(reg$spread)),reg$hedge.ratio,reg$premium)\n# }\n\n#estimate parameters for back test\n#params <- EstimateParametersHistorically(price.pair, period = params.period)\n\n#create & plot trading signals\n\n\n",
    "created" : 1455534254120.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "952725360",
    "id" : "F0196801",
    "lastKnownWriteTime" : 1455429279,
    "path" : "D:/百度云/My Box Files/workspaces/TradingStrategy/PairsTradingForRLWk/Example-1.R",
    "project_path" : "Example-1.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}