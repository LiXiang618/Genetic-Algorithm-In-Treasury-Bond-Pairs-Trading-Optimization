reward <- 0L
oldSignal <- 0
params.period <- a[1]
params.entryZscore <- a[2]
params.exitZscore <- 0
params.stoplossZscore <- a[3]
#lastday <- s[0]
setpDone <- F
num.days <- nrow(price.pair)
#标明episo done
while( day <= num.days){
rolldayPrice <- price.pair[(day - params.period + 1) : day, ]
reg <- EstimateParameters(rolldayPrice, method = lm)
# Notice: meanSpread & stdSpread is calculated from period price data, not entire data
meanSpread <- mean(na.omit(reg$spread))
stdSpread <- sd(na.omit(reg$spread))
zScore <- (reg$spread - meanSpread) / stdSpread
zScore.last <- last(zScore)
pair.zscore[day] <<- zScore.last
#pair.zscore[day - params.period + 1] <- zScore.last
# browser()
signal <- DaySignal(zScore.last, oldSignal, params.entryZscore,params.stoplossZscore)
signals[day] <<- signal
#signals[day - params.period + 1] <- signal
# 表明开仓了
# if (signal != oldSignal && signal != 0) {
#
# }
# 表明平仓了
if (!is.na(signal)&&signal != oldSignal && signal == 0) {
#setpDone <- TRUE
day <<- day + 1
s[3] <- 0
#browser()
#计算reward
#print(c(day, zScore.last))
return (c(reward , s))
#browser()
}
if(!is.na(signal)) oldSignal <- signal
day <<- day + 1
#print(c(day, zScore.last))
}
s[3] <- 1
#计算整体reward
return (c(reward,s));
}
tmp <- Setp(price.pair,s, a)
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
tmp <- Setp(price.pair,s, a)
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
tmp <- Setp(price.pair,s, a)
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
tmp <- Setp(price.pair,s, a)
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
DaySignal(1.5, 0, 2,3)
DaySignal(2.5, 0, 2,3)
DaySignal(2.5, -1, 2,3)
DaySignal <- function(zScore, oldSignal, entryZScore,stopLossZScroe){
#Long Close
if(zScore >= 0 &&zScore < entryZScore&& oldSignal == 1){
return(0)
}
#Shore Clsoe
if(zScore <= 0 &&zScore > -entryZScore&& oldSignal == -1){
return(0)
}
if(zScore > entryZScore && zScore < stopLossZScroe){
return(-1)
}
if(zScore < -entryZScore && zScore > -stopLossZScroe){
return(1)
}
return(NA)
}
DaySignal(2.5, 0, 2,3)
DaySignal(2.5, -1, 2,3)
DaySignal <- function(zScore, oldSignal, entryZScore,stopLossZScroe){
#Long Close
if(zScore >= 0 &&zScore < entryZScore&& oldSignal == 1){
return(0)
}
#Shore Clsoe
if(zScore <= 0 &&zScore > -entryZScore&& oldSignal == -1){
return(0)
}
if(zScore > entryZScore && zScore < stopLossZScroe && oldSignal != -1){
return(-1)
}
if(zScore < -entryZScore && zScore > -stopLossZScroe&& oldSignal != 1){
return(1)
}
return(NA)
}
DaySignal(2.5, 0, 2,3)
DaySignal(2.5, -1, 2,3)
DaySignal(0.1, -1, 2,3)
DaySignal(-0.1, -1, 2,3)
DaySignal(-1.5, -1, 2,3)
DaySignal(-2.5, -1, 2,3)
DaySignal(-1.5, 0, 2,3)
DaySignal(-2.5, 0, 2,3)
DaySignal(-2.5, 1, 2,3)
DaySignal(-1.5, 1, 2,3)
DaySignal(0, 1, 2,3)
DaySignal(0.1, 0, 2,3)
DaySignal <- function(zScore, oldSignal, entryZScore,stopLossZScroe){
#Long Close
if(zScore >= 0 &&zScore < entryZScore&& oldSignal == 1){
return(0)
}
#Shore Clsoe
if(zScore <= 0 &&zScore > -entryZScore&& oldSignal == -1){
return(0)
}
if(zScore > entryZScore && zScore < stopLossZScroe && oldSignal != -1){
return(-1)
}
if(zScore < -entryZScore && zScore > -stopLossZScroe&& oldSignal != 1){
return(1)
}
return(NA)
}
s <- s.ini()
a <- c(120,2.0,3.0)
tmp <- Setp(price.pair,s, a)
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
tmp <- Setp(price.pair,s, a)
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
tmp <- Setp(price.pair,s, a)
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
signals
price.pair <- stock.price[,1:2]["2006-1-03::"]
day <<- 190
signals <<- array(NA,dim = nrow(price.pair))
pair.zscore <<- array(NA,dim = nrow((price.pair)))
#test DaySignal
DaySignal(1.5, 0, 2,3)
#test setp
s <- s.ini()
a <- c(120,2.0,3.0)
signals
tmp <- Setp(price.pair,s, a)
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
signals
tmp <- Setp(price.pair,s, a)
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
tmp <- Setp(price.pair,s, a)
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
tmp <- Setp(price.pair,s, a)
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
tmp <- Setp(price.pair,s, a)
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
signals
tmp <- Setp(price.pair,s, a)
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
tmp <- Setp(price.pair,s, a)
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
tmp <- Setp(price.pair,s, a)
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
tmp <- Setp(price.pair,s, a)
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
tmp <- Setp(price.pair,s, a)
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
tmp <- Setp(price.pair,s, a)
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
tmp <- Setp(price.pair,s, a)
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
tmp <- Setp(price.pair,s, a)
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
tmp <- Setp(price.pair,s, a)
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
print(c(tmp[3],day-1, signals[day-1],pair.zscore[day-1]))
tmp <- Setp(price.pair,s, a)
print(c(tmp[3],day-1, signals[day-1],pair.zscore[day-1]))
tmp[2][3]
tmp
tmp[2:3]
tmp[2,3]
temp <- c(0,c(1,2,3))
temp
temp[4]
temp[2:4]
s
s <- temp[2:4]
s
price.pair <- stock.price[,1:2]["2006-1-03::"]
day <<- 190
signals <<- array(NA,dim = nrow(price.pair))
pair.zscore <<- array(NA,dim = nrow((price.pair)))
#test DaySignal
#DaySignal(1.5, 0, 2,3)
#test setp
s <- s.ini()
a <- c(120,2.0,3.0)
while (s[3] == 0L) {
# performing step
tmp <- Setp(price.pair,s, a)
s <- tmp[2:4]
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
}
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
DaySignal(1.5, 0, 2,3)
DaySignal(2.1, 0, 2,3)
DaySignal(3.1, -1, 2,3)
Assert(1,1)
library("R.utils")
install.packages('assertthat')
load.library("assertthat")
?assert_that
x <- 1
see_if(length(x) == 3)
assert_that(length(x) == 3)
assert_that(DaySignal(1.5, 0, 2,3) == NA)
assert_that(is.na(DaySignal(1.5, 0, 2,3))
）
assert_that(is.na(DaySignal(1.5, 0, 2,3)))
assert_that(DaySignal(2.1, 0, 2,3),-1)
assert_that(DaySignal(2.1, 0, 2,3)=-1)
assert_that(DaySignal(2.1, 0, 2,3) == -1)
assert_that(DaySignal(3.1, -1, 2,3) == 0)
DaySignal(3.1, -1, 2,3)
DaySignal(2.1, -1, 2,3)
DaySignal(3.1, -1, 2,3)
DaySignal <- function(zScore, oldSignal, entryZScore,stopLossZScroe){
#Short Stop loss close
if(zScore >= stopLossZScroe && oldSignal == -1){
return(0)
}
#Long Stop loss close
if(zScore <= -stopLossZScroe && oldSignal == 1){
return(0)
}
#Long Close
if(zScore >= 0 &&zScore < entryZScore&& oldSignal == 1){
return(0)
}
#Shore Clsoe
if(zScore <= 0 &&zScore > -entryZScore&& oldSignal == -1){
return(0)
}
if(zScore > entryZScore && zScore < stopLossZScroe && oldSignal != -1){
return(-1)
}
if(zScore < -entryZScore && zScore > -stopLossZScroe&& oldSignal != 1){
return(1)
}
return(NA)
}
DaySignal(3.1, -1, 2,3)
assert_that(DaySignal(3.1, -1, 2,3) == 0)
assert_that(DaySignal(2.5, 0, 2,3) == 0)
DaySignal(2.5, 0, 2,3)
assert_that(is.na(DaySignal(1.8, -1, 2,3))
)
assert_that(DaySignal(0, -1, 2,3) == 0)
assert_that(DaySignal(-2.0, 0, 2,3) == 1)
assert_that(DaySignal(-2.1, 0, 2,3) == 1)
assert_that(DaySignal(-2.0, 0, 2,3) == 1)
DaySignal <- function(zScore, oldSignal, entryZScore,stopLossZScroe){
#Short Stop loss close
if(zScore >= stopLossZScroe && oldSignal == -1){
return(0)
}
#Long Stop loss close
if(zScore <= -stopLossZScroe && oldSignal == 1){
return(0)
}
#Long Close
if(zScore >= 0 &&zScore < entryZScore&& oldSignal == 1){
return(0)
}
#Shore Clsoe
if(zScore <= 0 &&zScore > -entryZScore&& oldSignal == -1){
return(0)
}
if(zScore >= entryZScore && zScore < stopLossZScroe && oldSignal != -1){
return(-1)
}
if(zScore <= -entryZScore && zScore > -stopLossZScroe&& oldSignal != 1){
return(1)
}
return(NA)
}
assert_that(DaySignal(-2.0, 0, 2,3) == 1)
assert_that(DaySignal(-3.0, 1, 2,3) == 0)
assert_that(DaySignal(-2.5, 0, 2,3) == 1)
assert_that(DaySignal(0.1, 1, 2,3) == 0)
assert_that(is.na(DaySignal(1.5, 0, 2,3)))
assert_that(DaySignal(2.1, 0, 2,3) == -1)
assert_that(DaySignal(3.1, -1, 2,3) == 0)
assert_that(DaySignal(2.5, 0, 2,3) == -1) #here is error
assert_that(is.na(DaySignal(1.8, -1, 2,3)))
assert_that(DaySignal(0, -1, 2,3) == 0)
assert_that(DaySignal(-2.0, 0, 2,3) == 1)
assert_that(DaySignal(-3.0, 1, 2,3) == 0)
assert_that(DaySignal(-2.5, 0, 2,3) == 1)
assert_that(DaySignal(0.1, 1, 2,3) == 0)
s <- s.ini()
a <- c(120,2.0,3.0)
while (s[3] == 0L) {
# performing step
tmp <- Setp(price.pair,s, a)
s <- tmp[2:4]
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
}
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
TestDaySignal <- function(){
#test DaySignal
assert_that(is.na(DaySignal(1.5, 0, 2,3)))
assert_that(DaySignal(2.1, 0, 2,3) == -1)
assert_that(DaySignal(3.1, -1, 2,3) == 0)
assert_that(DaySignal(2.5, 0, 2,3) == -1) #here is error
assert_that(is.na(DaySignal(1.8, -1, 2,3)))
assert_that(DaySignal(0, -1, 2,3) == 0)
assert_that(DaySignal(-2.0, 0, 2,3) == 1)
assert_that(DaySignal(-3.0, 1, 2,3) == 0)
assert_that(DaySignal(-2.5, 0, 2,3) == 1)
assert_that(DaySignal(0.1, 1, 2,3) == 0)
}
TestDaySignal()
TestDaySignal <- function(){
#test DaySignal
assert_that(is.na(DaySignal(1.5, 0, 2,3)))
assert_that(DaySignal(2.1, 0, 2,3) != -1)
assert_that(DaySignal(3.1, -1, 2,3) == 0)
assert_that(DaySignal(2.5, 0, 2,3) == -1) #here is error
assert_that(is.na(DaySignal(1.8, -1, 2,3)))
assert_that(DaySignal(0, -1, 2,3) == 0)
assert_that(DaySignal(-2.0, 0, 2,3) == 1)
assert_that(DaySignal(-3.0, 1, 2,3) == 0)
assert_that(DaySignal(-2.5, 0, 2,3) == 1)
assert_that(DaySignal(0.1, 1, 2,3) == 0)
}
TestDaySignal()
price.pair <- stock.price[,1:2]["2006-1-03::"]
day <<- 190
signals <<- array(NA,dim = nrow(price.pair))
pair.zscore <<- array(NA,dim = nrow((price.pair)))
#test setp
s <- s.ini()
a <- c(120,2.0,3.0)
while (s[3] == 0L) {
# performing step
tmp <- Setp(price.pair,s, a)
s <- tmp[2:4]
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
}
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
Setp <- function(price.pair, s, a)
{
# if terminal state, exit gracefully
if(s[3] == 1)
return(list(0L,s))
# both new state and reward will be returned
new.s <- s
reward <- 0L
oldSignal <- 0
params.period <- a[1]
params.entryZscore <- a[2]
params.exitZscore <- 0
params.stoplossZscore <- a[3]
#lastday <- s[0]
#setpDone <- F
num.days <- nrow(price.pair)
#标明episo done
while( day <= num.days){
rolldayPrice <- price.pair[(day - params.period + 1) : day, ]
reg <- EstimateParameters(rolldayPrice, method = lm)
# Notice: meanSpread & stdSpread is calculated from period price data, not entire data
meanSpread <- mean(na.omit(reg$spread))
stdSpread <- sd(na.omit(reg$spread))
zScore <- (reg$spread - meanSpread) / stdSpread
zScore.last <- last(zScore)
pair.zscore[day] <<- zScore.last
#pair.zscore[day - params.period + 1] <- zScore.last
# browser()
signal <- DaySignal(zScore.last, oldSignal, params.entryZscore,params.stoplossZscore)
signals[day] <<- signal
#signals[day - params.period + 1] <- signal
# 表明开仓了
# if (signal != oldSignal && signal != 0) {
#
# }
# 表明平仓了
if (!is.na(signal)&&signal != oldSignal && signal == 0) {
#setpDone <- TRUE
day <<- day + 1
s[3] <- 0
#browser()
#计算reward
#print(c(day, zScore.last))
return (c(reward , s))
#browser()
}
if(!is.na(signal)) oldSignal <- signal
day <<- day + 1
#print(c(day, zScore.last))
}
# at last close all position
if(oldSignal!=0) signals[day] <<- 0
s[3] <- 1
#计算整体reward
return (c(reward,s));
}
price.pair <- stock.price[,1:2]["2006-1-03::"]
day <<- 190
signals <<- array(NA,dim = nrow(price.pair))
pair.zscore <<- array(NA,dim = nrow((price.pair)))
#test setp
s <- s.ini()
a <- c(120,2.0,3.0)
while (s[3] == 0L) {
# performing step
tmp <- Setp(price.pair,s, a)
s <- tmp[2:4]
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
}
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
signals
day-1
nrow(signals)
length(signals)
day <<- 190
signals <<- array(NA,dim = nrow(price.pair))
pair.zscore <<- array(NA,dim = nrow((price.pair)))
#test setp
s <- s.ini()
a <- c(120,2.0,3.0)
while (s[3] == 0L) {
# performing step
tmp <- Setp(price.pair,s, a)
s <- tmp[2:4]
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
}
print(c(s[3],day-1, signals[day],pair.zscore[day]))
pair.zscore
length(pair.zscore)
nrow((price.pair)
)
length(signals)
Setp <- function(price.pair, s, a)
{
# if terminal state, exit gracefully
if(s[3] == 1)
return(list(0L,s))
# both new state and reward will be returned
new.s <- s
reward <- 0L
oldSignal <- 0
params.period <- a[1]
params.entryZscore <- a[2]
params.exitZscore <- 0
params.stoplossZscore <- a[3]
#lastday <- s[0]
#setpDone <- F
num.days <- nrow(price.pair)
#标明episo done
while( day <= num.days){
rolldayPrice <- price.pair[(day - params.period + 1) : day, ]
reg <- EstimateParameters(rolldayPrice, method = lm)
# Notice: meanSpread & stdSpread is calculated from period price data, not entire data
meanSpread <- mean(na.omit(reg$spread))
stdSpread <- sd(na.omit(reg$spread))
zScore <- (reg$spread - meanSpread) / stdSpread
zScore.last <- last(zScore)
pair.zscore[day] <<- zScore.last
#pair.zscore[day - params.period + 1] <- zScore.last
# browser()
signal <- DaySignal(zScore.last, oldSignal, params.entryZscore,params.stoplossZscore)
signals[day] <<- signal
#signals[day - params.period + 1] <- signal
# 表明开仓了
# if (signal != oldSignal && signal != 0) {
#
# }
# 表明平仓了
if (!is.na(signal)&&signal != oldSignal && signal == 0) {
#setpDone <- TRUE
day <<- day + 1
s[3] <- 0
#browser()
#计算reward
#print(c(day, zScore.last))
return (c(reward , s))
#browser()
}
if(!is.na(signal)) oldSignal <- signal
day <<- day + 1
#print(c(day, zScore.last))
}
# at last close all position
if(oldSignal!=0) signals[day-1] <<- 0
s[3] <- 1
#计算整体reward
return (c(reward,s));
}
price.pair <- stock.price[,1:2]["2006-1-03::"]
day <<- 190
signals <<- array(NA,dim = nrow(price.pair))
pair.zscore <<- array(NA,dim = nrow((price.pair)))
#test setp
s <- s.ini()
a <- c(120,2.0,3.0)
while (s[3] == 0L) {
# performing step
tmp <- Setp(price.pair,s, a)
s <- tmp[2:4]
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
}
print(c(s[3],day-1, signals[day-1],pair.zscore[day-1]))
signals
