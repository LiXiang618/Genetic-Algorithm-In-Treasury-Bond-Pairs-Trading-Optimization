{
    "collab_server" : "",
    "contents" : "Simple <- function(spread, spread.entry)\n{\n  signal <- ifelse(spread >=   spread.entry, -1, NA)\n  signal <- ifelse(spread <=  -spread.entry,  1, signal)\n  return(na.locf(signal))\n}\nSimpleWithTakeProfit <- function(spread, spread.entry, spread.take.profit)\n{\n  signal <- ifelse(spread >=   abs(spread.entry), -1, 0)\n  signal <- ifelse(spread <=  -abs(spread.entry),  1, signal)\n  \n  take.profit.upper <-  abs(spread.take.profit)\n  take.profit.lower <- -take.profit.upper\n\n  #Hit take.profit line : 0\n  #other case : continue previous position\n  for(i in 2:nrow(signal))\n  {\n    if(signal[i] == 0){\n      if(signal[i - 1] == 1){\n        if(spread[i] >= take.profit.lower){\n          signal[i] <- 0\n        }else{\n          signal[i] <- signal[i - 1]\n        }\n      }else if(signal[i - 1] == -1){\n        if(spread[i] <= take.profit.upper){\n          signal[i] <- 0\n        }else{\n          signal[i] <- signal[i - 1]          \n        }\n      }\n    }\n  }\n  return(signal)\n}\nSignalWithZscore <- function(spreadZscore, entryZscore,stoplossZscore = NA)\n{\n  signal <- ifelse(spreadZscore >=   entryZscore, -1, NA)\n  signal <- ifelse(spreadZscore <=  -entryZscore,  1, signal)\n  if (is.na(stoplossZscore))   return(na.locf(signal))\n\n  stoplossZscore.upper <-  abs(stoplossZscore)\n  stoplossZscore.lower <- -stoplossZscore\n\n  #Hit take.profit line : 0\n  #other case : continue previous position\n  for(i in 2:nrow(signal))\n  {\n    if(signal[i] == 0){\n      if(signal[i - 1] == 1){\n        if(spreadZscore[i] >= stoplossZscore.lower){\n          signal[i] <- 0\n        }else{\n          signal[i] <- signal[i - 1]\n        }\n      }else if(signal[i - 1] == -1){\n        if(spreadZscore[i] <= stoplossZscore.upper){\n          signal[i] <- 0\n        }else{\n          signal[i] <- signal[i - 1]          \n        }\n      }\n    }\n  }\n  return(signal)\n\n}\n\n#return:\n#  -1 Short Open\n#  1 Long Open\n#  0 Close\n#  NA DoNothing\nDaySignal <- function(zscore.current, zscore.pre, entryZScore, stopLossZScroe) {\n    if (is.na(zscore.pre)) {\n      return(NA)\n    }\n    if (zscore.pre < entryZScore && zscore.current > entryZScore) {\n      return(-1)\n    }\n    if (zscore.pre > -entryZScore && zscore.current < -entryZScore) {\n      return(1)\n    }\n    if (zscore.pre > 0 && zscore.current < 0) {\n      return(0)\n    }\n    if (zscore.pre < 0 && zscore.current > 0) {\n      return(0)\n    }\n    if (zscore.pre < stopLossZScroe &&\n        zscore.current > stopLossZScroe) {\n      return(0)\n    }\n    if (zscore.pre > -stopLossZScroe &&\n        zscore.current < -stopLossZScroe) {\n      return(0)\n    }\n    return(NA)\n  }\n\nTestDaySignal <- function(){\n  #test DaySignal\n  assert_that(is.na(DaySignal(1.5, 0, 2,3)))\n  assert_that(DaySignal(2.1, 0, 2,3) == -1)\n  assert_that(DaySignal(3.1, -1, 2,3) == 0)\n  assert_that(DaySignal(2.5, 0, 2,3) == -1) #here is error\n  assert_that(is.na(DaySignal(1.8, -1, 2,3)))\n  assert_that(DaySignal(0, -1, 2,3) == 0)\n  assert_that(DaySignal(-2.0, 0, 2,3) == 1)\n  assert_that(DaySignal(-3.0, 1, 2,3) == 0)\n  assert_that(DaySignal(-2.5, 0, 2,3) == 1)\n  assert_that(DaySignal(0.1, 1, 2,3) == 0)\n}\n\nPlotWithSignal <- function(zscore, signal, zscore.entry=1.5, zscore.exit=0, zscore.stoploss=2.5){\n  data.comb <- na.omit(cbind(zscore, signal))\n  zscore <- data.comb[, 1]\n  signal <- data.comb[, 2]\n  timestamps <- index(zscore)\n  zScoreDiagramString <- paste('Strategy (Zscore entry above/below ',zscore.entry, ' std, Zscore exit below/above ', zscore.exit, ' std)', sep=\"\")\n  plot(timestamps, zscore, xlab=\"Time\", ylab=\"Zscore\", main=zScoreDiagramString, type=\"l\")\n  lim <- par(\"usr\")\n  beginRect <- 1\n  endRect <- 1\n  signal.length <- length(signal)\n  for(i in 2:(signal.length - 1))\n  {\n    # Begin long position\n    if(signal[i]==1 && signal[i-1]==0){\n      beginRect <- i\n    }\n    # Begin short position\n    if(signal[i]==-1 && signal[i-1]==0){\n      beginRect <- i\n    }\n    # End long position\n    if(signal[i]==0 && signal[i-1]==1){\n      rect(timestamps[beginRect], lim[3]-1, timestamps[i], -zscore.exit, col = \"green\")\n    }\n    # End short position\n    if(signal[i]==0 && signal[i-1]==-1){\n      rect(timestamps[beginRect], zscore.exit, timestamps[i], lim[4]+2, col = \"red\")\n    }\n  }\n  \n  if(signal[signal.length] == 1 && signal[signal.length-1] == 1){\n    rect(timestamps[beginRect], lim[3]-1, timestamps[signal.length], -zscore.exit, col = \"green\")\n  }else if(signal[signal.length] == -1 && signal[signal.length-1] == -1){\n    rect(timestamps[beginRect], zscore.exit, timestamps[signal.length], lim[4]+2, col = \"red\")\n  }\n  lines(timestamps, zscore)\n  abline(h=c(-zscore.entry,zscore.entry,-zscore.exit,zscore.exit,-zscore.stoploss,zscore.stoploss),col=c(\"blue\",\"blue\",\"red\",\"red\",\"green\",\"green\"))\n}\n\n\nPlotWithSignalFloatEntry <- function(zscore, signal, zscore.entry, zscore.exit=0, zscore.stoploss){\n  zscore.entry <- na.locf(zscore.entry)\n  zscore.stoploss <- na.locf(zscore.stoploss)\n  data.comb <- na.omit(cbind(zscore, signal, zscore.entry, zscore.stoploss))\n\n  zscore <- data.comb[, 1]\n  signal <- data.comb[, 2]\n  timestamps <- index(zscore)\n  zScoreDiagramString <- 'Strategy (Zscore)'\n  plot(timestamps, zscore, xlab=\"Time\", ylab=\"Zscore\", main=zScoreDiagramString, type=\"l\")\n  lim <- par(\"usr\")\n  beginRect <- 1\n  endRect <- 1\n  signal.length <- length(signal)\n  for(i in 2:signal.length)\n  {\n    # End long position\n    if(signal[i-1] == 1 && signal[i] != 1){\n      rect(timestamps[beginRect], lim[3]-1, timestamps[i-1], -zscore.exit, col = \"green\")\n    }\n    # End short position\n    if(signal[i-1] == -1 && signal[i] != -1){\n      rect(timestamps[beginRect], zscore.exit, timestamps[i-1], lim[4]+2, col = \"red\")\n    }\n    # Begin long position\n    if(signal[i] == 1 && signal[i-1] != 1){\n      beginRect <- i\n    }\n    # Begin short position\n    if(signal[i] == -1 && signal[i-1] != -1){\n      beginRect <- i\n    }\n  }\n  \n  lines(timestamps, zscore)\n  abline(h=c(-zscore.exit,zscore.exit),col=c(\"red\",\"red\"))\n  lines(timestamps, data.comb[, 3], col='blue')\n  lines(timestamps, -data.comb[, 3], col='blue')\n  lines(timestamps, data.comb[, 4], col='purple')\n  lines(timestamps, -data.comb[, 4], col='purple')\n}\n",
    "created" : 1496779388078.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1698859780",
    "id" : "2A8467BC",
    "lastKnownWriteTime" : 1457462414,
    "last_content_update" : 1457462414,
    "path" : "C:/Users/Li Xiang/OneDrive/Projects/一专毕设/Working/backup/Signal.R",
    "project_path" : "Signal.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}