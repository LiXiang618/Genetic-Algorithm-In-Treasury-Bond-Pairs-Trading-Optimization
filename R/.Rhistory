}
rbga.results <-  rbga(c(150, 50, 0.5, 3.1), c(250, 150, 3, 5),popSize = 12,iters = 40,
evalFunc=evalFunc,monitorFunc = monitor, verbose=TRUE, mutationChance=0.2)
library(genalg)
evalFunc <- function(string=c()) {
assets.id <- c('GZ5Y', 'GZ7Y')
init(assets.id, TRUE,'2007-06-01','2010-06-01')
s0(round(string[1]))
status <- c(CLOSED)
a <- c(round(string[1]),round(string[2]),round(string[3],1),round(string[4],1))
print(a)
while (status[1] != TERMINAL) {
tmp <- step(status, a)
status <- tmp[1]
}
price.return <- na.omit(Return.calculate(self$sample))
portfolio.return <- Return.portfolio(price.return, weights = lag(self$weight), geometric = F)
maxDrawdown <- maxDrawdown(portfolio.return)
sortinoRatio <- SortinoRatio(portfolio.return)
Return.annualized <- Return.annualized(portfolio.return)
print(c(maxDrawdown,sortinoRatio ,Return.annualized ))
#-(20*Return.annualized+10*sortinoRatio-maxDrawdown)
return(-Return.annualized)
}
monitor <- function(obj) {
print("-------------------------------------------------------")
print(class(obj))
print(obj)
print("--------------------------------------------------------")
}
rbga.results <-  rbga(c(150, 50, 0.5, 3.1), c(250, 150, 3, 5),popSize = 12,iters = 40,
evalFunc=evalFunc,monitorFunc = monitor, verbose=TRUE, mutationChance=0.2)
library(genalg)
evalFunc <- function(string=c()) {
assets.id <- c('GZ5Y', 'GZ7Y')
init(assets.id, TRUE,'2007-06-01','2009-06-01')
s0(round(string[1]))
status <- c(CLOSED)
a <- c(round(string[1]),round(string[2]),round(string[3],1),round(string[4],1))
print(a)
while (status[1] != TERMINAL) {
tmp <- step(status, a)
status <- tmp[1]
}
price.return <- na.omit(Return.calculate(self$sample))
portfolio.return <- Return.portfolio(price.return, weights = lag(self$weight), geometric = F)
maxDrawdown <- maxDrawdown(portfolio.return)
sortinoRatio <- SortinoRatio(portfolio.return)
Return.annualized <- Return.annualized(portfolio.return)
print(c(maxDrawdown,sortinoRatio ,Return.annualized ))
#-(20*Return.annualized+10*sortinoRatio-maxDrawdown)
return(-Return.annualized)
}
monitor <- function(obj) {
print("-------------------------------------------------------")
print(class(obj))
print(obj)
print("--------------------------------------------------------")
}
rbga.results <-  rbga(c(150, 50, 0.5, 3.1), c(250, 150, 3, 5),popSize = 12,iters = 40,
evalFunc=evalFunc,monitorFunc = monitor, verbose=TRUE, mutationChance=0.2)
library(genalg)
evalFunc <- function(string=c()) {
assets.id <- c('GZ5Y', 'GZ7Y')
init(assets.id, TRUE,'2008-06-01','2014-06-01')
s0(round(string[1]))
status <- c(CLOSED)
a <- c(round(string[1]),round(string[2]),round(string[3],1),round(string[4],1))
print(a)
while (status[1] != TERMINAL) {
tmp <- step(status, a)
status <- tmp[1]
}
price.return <- na.omit(Return.calculate(self$sample))
portfolio.return <- Return.portfolio(price.return, weights = lag(self$weight), geometric = F)
maxDrawdown <- maxDrawdown(portfolio.return)
sortinoRatio <- SortinoRatio(portfolio.return)
Return.annualized <- Return.annualized(portfolio.return)
print(c(maxDrawdown,sortinoRatio ,Return.annualized ))
#-(20*Return.annualized+10*sortinoRatio-maxDrawdown)
return(-Return.annualized)
}
monitor <- function(obj) {
print("-------------------------------------------------------")
print(class(obj))
print(obj)
print("--------------------------------------------------------")
}
rbga.results <-  rbga(c(150, 50, 0.5, 3.1), c(250, 150, 3, 5),popSize = 12,iters = 40,
evalFunc=evalFunc,monitorFunc = monitor, verbose=TRUE, mutationChance=0.2)
library(genalg)
evalFunc <- function(string=c()) {
assets.id <- c('GZ5Y', 'GZ7Y')
init(assets.id, TRUE,'2008-06-01','2013-06-01')
s0(round(string[1]))
status <- c(CLOSED)
a <- c(round(string[1]),round(string[2]),round(string[3],1),round(string[4],1))
print(a)
while (status[1] != TERMINAL) {
tmp <- step(status, a)
status <- tmp[1]
}
price.return <- na.omit(Return.calculate(self$sample))
portfolio.return <- Return.portfolio(price.return, weights = lag(self$weight), geometric = F)
maxDrawdown <- maxDrawdown(portfolio.return)
sortinoRatio <- SortinoRatio(portfolio.return)
Return.annualized <- Return.annualized(portfolio.return)
print(c(maxDrawdown,sortinoRatio ,Return.annualized ))
#-(20*Return.annualized+10*sortinoRatio-maxDrawdown)
return(-Return.annualized)
}
monitor <- function(obj) {
print("-------------------------------------------------------")
print(class(obj))
print(obj)
print("--------------------------------------------------------")
}
rbga.results <-  rbga(c(150, 50, 0.5, 3.1), c(250, 150, 3, 5),popSize = 12,iters = 40,
evalFunc=evalFunc,monitorFunc = monitor, verbose=TRUE, mutationChance=0.2)
library(genalg)
evalFunc <- function(string=c()) {
assets.id <- c('GZ5Y', 'GZ7Y')
init(assets.id, TRUE,'2008-06-01','2012-06-01')
s0(round(string[1]))
status <- c(CLOSED)
a <- c(round(string[1]),round(string[2]),round(string[3],1),round(string[4],1))
print(a)
while (status[1] != TERMINAL) {
tmp <- step(status, a)
status <- tmp[1]
}
price.return <- na.omit(Return.calculate(self$sample))
portfolio.return <- Return.portfolio(price.return, weights = lag(self$weight), geometric = F)
maxDrawdown <- maxDrawdown(portfolio.return)
sortinoRatio <- SortinoRatio(portfolio.return)
Return.annualized <- Return.annualized(portfolio.return)
print(c(maxDrawdown,sortinoRatio ,Return.annualized ))
#-(20*Return.annualized+10*sortinoRatio-maxDrawdown)
return(-Return.annualized)
}
monitor <- function(obj) {
print("-------------------------------------------------------")
print(class(obj))
print(obj)
print("--------------------------------------------------------")
}
rbga.results <-  rbga(c(150, 50, 0.5, 3.1), c(250, 150, 3, 5),popSize = 12,iters = 40,
evalFunc=evalFunc,monitorFunc = monitor, verbose=TRUE, mutationChance=0.2)
library(genalg)
evalFunc <- function(string=c()) {
assets.id <- c('GZ5Y', 'GZ7Y')
init(assets.id, TRUE,'2008-06-01','2011-06-01')
s0(round(string[1]))
status <- c(CLOSED)
a <- c(round(string[1]),round(string[2]),round(string[3],1),round(string[4],1))
print(a)
while (status[1] != TERMINAL) {
tmp <- step(status, a)
status <- tmp[1]
}
price.return <- na.omit(Return.calculate(self$sample))
portfolio.return <- Return.portfolio(price.return, weights = lag(self$weight), geometric = F)
maxDrawdown <- maxDrawdown(portfolio.return)
sortinoRatio <- SortinoRatio(portfolio.return)
Return.annualized <- Return.annualized(portfolio.return)
print(c(maxDrawdown,sortinoRatio ,Return.annualized ))
#-(20*Return.annualized+10*sortinoRatio-maxDrawdown)
return(-Return.annualized)
}
monitor <- function(obj) {
print("-------------------------------------------------------")
print(class(obj))
print(obj)
print("--------------------------------------------------------")
}
rbga.results <-  rbga(c(150, 50, 0.5, 3.1), c(250, 150, 3, 5),popSize = 12,iters = 40,
evalFunc=evalFunc,monitorFunc = monitor, verbose=TRUE, mutationChance=0.2)
library(genalg)
evalFunc <- function(string=c()) {
assets.id <- c('GZ5Y', 'GZ7Y')
init(assets.id, TRUE,'2008-06-01','2010-06-01')
s0(round(string[1]))
status <- c(CLOSED)
a <- c(round(string[1]),round(string[2]),round(string[3],1),round(string[4],1))
print(a)
while (status[1] != TERMINAL) {
tmp <- step(status, a)
status <- tmp[1]
}
price.return <- na.omit(Return.calculate(self$sample))
portfolio.return <- Return.portfolio(price.return, weights = lag(self$weight), geometric = F)
maxDrawdown <- maxDrawdown(portfolio.return)
sortinoRatio <- SortinoRatio(portfolio.return)
Return.annualized <- Return.annualized(portfolio.return)
print(c(maxDrawdown,sortinoRatio ,Return.annualized ))
#-(20*Return.annualized+10*sortinoRatio-maxDrawdown)
return(-Return.annualized)
}
monitor <- function(obj) {
print("-------------------------------------------------------")
print(class(obj))
print(obj)
print("--------------------------------------------------------")
}
rbga.results <-  rbga(c(150, 50, 0.5, 3.1), c(250, 150, 3, 5),popSize = 12,iters = 40,
evalFunc=evalFunc,monitorFunc = monitor, verbose=TRUE, mutationChance=0.2)
library(genalg)
evalFunc <- function(string=c()) {
assets.id <- c('GZ5Y', 'GZ7Y')
init(assets.id, TRUE,'2009-06-01','2014-06-01')
s0(round(string[1]))
status <- c(CLOSED)
a <- c(round(string[1]),round(string[2]),round(string[3],1),round(string[4],1))
print(a)
while (status[1] != TERMINAL) {
tmp <- step(status, a)
status <- tmp[1]
}
price.return <- na.omit(Return.calculate(self$sample))
portfolio.return <- Return.portfolio(price.return, weights = lag(self$weight), geometric = F)
maxDrawdown <- maxDrawdown(portfolio.return)
sortinoRatio <- SortinoRatio(portfolio.return)
Return.annualized <- Return.annualized(portfolio.return)
print(c(maxDrawdown,sortinoRatio ,Return.annualized ))
#-(20*Return.annualized+10*sortinoRatio-maxDrawdown)
return(-Return.annualized)
}
monitor <- function(obj) {
print("-------------------------------------------------------")
print(class(obj))
print(obj)
print("--------------------------------------------------------")
}
rbga.results <-  rbga(c(150, 50, 0.5, 3.1), c(250, 150, 3, 5),popSize = 12,iters = 40,
evalFunc=evalFunc,monitorFunc = monitor, verbose=TRUE, mutationChance=0.2)
library(genalg)
evalFunc <- function(string=c()) {
assets.id <- c('GZ5Y', 'GZ7Y')
init(assets.id, TRUE,'2009-06-01','2013-06-01')
s0(round(string[1]))
status <- c(CLOSED)
a <- c(round(string[1]),round(string[2]),round(string[3],1),round(string[4],1))
print(a)
while (status[1] != TERMINAL) {
tmp <- step(status, a)
status <- tmp[1]
}
price.return <- na.omit(Return.calculate(self$sample))
portfolio.return <- Return.portfolio(price.return, weights = lag(self$weight), geometric = F)
maxDrawdown <- maxDrawdown(portfolio.return)
sortinoRatio <- SortinoRatio(portfolio.return)
Return.annualized <- Return.annualized(portfolio.return)
print(c(maxDrawdown,sortinoRatio ,Return.annualized ))
#-(20*Return.annualized+10*sortinoRatio-maxDrawdown)
return(-Return.annualized)
}
monitor <- function(obj) {
print("-------------------------------------------------------")
print(class(obj))
print(obj)
print("--------------------------------------------------------")
}
rbga.results <-  rbga(c(150, 50, 0.5, 3.1), c(250, 150, 3, 5),popSize = 12,iters = 40,
evalFunc=evalFunc,monitorFunc = monitor, verbose=TRUE, mutationChance=0.2)
library(genalg)
evalFunc <- function(string=c()) {
assets.id <- c('GZ5Y', 'GZ7Y')
init(assets.id, TRUE,'2009-06-01','2012-06-01')
s0(round(string[1]))
status <- c(CLOSED)
a <- c(round(string[1]),round(string[2]),round(string[3],1),round(string[4],1))
print(a)
while (status[1] != TERMINAL) {
tmp <- step(status, a)
status <- tmp[1]
}
price.return <- na.omit(Return.calculate(self$sample))
portfolio.return <- Return.portfolio(price.return, weights = lag(self$weight), geometric = F)
maxDrawdown <- maxDrawdown(portfolio.return)
sortinoRatio <- SortinoRatio(portfolio.return)
Return.annualized <- Return.annualized(portfolio.return)
print(c(maxDrawdown,sortinoRatio ,Return.annualized ))
#-(20*Return.annualized+10*sortinoRatio-maxDrawdown)
return(-Return.annualized)
}
monitor <- function(obj) {
print("-------------------------------------------------------")
print(class(obj))
print(obj)
print("--------------------------------------------------------")
}
rbga.results <-  rbga(c(150, 50, 0.5, 3.1), c(250, 150, 3, 5),popSize = 12,iters = 40,
evalFunc=evalFunc,monitorFunc = monitor, verbose=TRUE, mutationChance=0.2)
load.library("mailR")
library(genalg)
evalFunc <- function(string=c()) {
assets.id <- c('GZ5Y', 'GZ7Y')
init(assets.id, TRUE,'2009-06-01','2011-06-01')
s0(round(string[1]))
status <- c(CLOSED)
a <- c(round(string[1]),round(string[2]),round(string[3],1),round(string[4],1))
print(a)
while (status[1] != TERMINAL) {
tmp <- step(status, a)
status <- tmp[1]
}
price.return <- na.omit(Return.calculate(self$sample))
portfolio.return <- Return.portfolio(price.return, weights = lag(self$weight), geometric = F)
maxDrawdown <- maxDrawdown(portfolio.return)
sortinoRatio <- SortinoRatio(portfolio.return)
Return.annualized <- Return.annualized(portfolio.return)
print(c(maxDrawdown,sortinoRatio ,Return.annualized ))
#-(20*Return.annualized+10*sortinoRatio-maxDrawdown)
return(-Return.annualized)
}
monitor <- function(obj) {
print("-------------------------------------------------------")
print(class(obj))
print(obj)
print("--------------------------------------------------------")
}
rbga.results <-  rbga(c(150, 50, 0.5, 3.1), c(250, 150, 3, 5),popSize = 12,iters = 40,
evalFunc=evalFunc,monitorFunc = monitor, verbose=TRUE, mutationChance=0.2)
library(genalg)
evalFunc <- function(string=c()) {
assets.id <- c('GZ5Y', 'GZ7Y')
init(assets.id, TRUE,'2010-06-01','2014-06-01')
s0(round(string[1]))
status <- c(CLOSED)
a <- c(round(string[1]),round(string[2]),round(string[3],1),round(string[4],1))
print(a)
while (status[1] != TERMINAL) {
tmp <- step(status, a)
status <- tmp[1]
}
price.return <- na.omit(Return.calculate(self$sample))
portfolio.return <- Return.portfolio(price.return, weights = lag(self$weight), geometric = F)
maxDrawdown <- maxDrawdown(portfolio.return)
sortinoRatio <- SortinoRatio(portfolio.return)
Return.annualized <- Return.annualized(portfolio.return)
print(c(maxDrawdown,sortinoRatio ,Return.annualized ))
#-(20*Return.annualized+10*sortinoRatio-maxDrawdown)
return(-Return.annualized)
}
monitor <- function(obj) {
print("-------------------------------------------------------")
print(class(obj))
print(obj)
print("--------------------------------------------------------")
}
rbga.results <-  rbga(c(150, 50, 0.5, 3.1), c(250, 150, 3, 5),popSize = 12,iters = 40,
evalFunc=evalFunc,monitorFunc = monitor, verbose=TRUE, mutationChance=0.2)
library(genalg)
evalFunc <- function(string=c()) {
assets.id <- c('GZ5Y', 'GZ7Y')
init(assets.id, TRUE,'2010-06-01','2013-06-01')
s0(round(string[1]))
status <- c(CLOSED)
a <- c(round(string[1]),round(string[2]),round(string[3],1),round(string[4],1))
print(a)
while (status[1] != TERMINAL) {
tmp <- step(status, a)
status <- tmp[1]
}
price.return <- na.omit(Return.calculate(self$sample))
portfolio.return <- Return.portfolio(price.return, weights = lag(self$weight), geometric = F)
maxDrawdown <- maxDrawdown(portfolio.return)
sortinoRatio <- SortinoRatio(portfolio.return)
Return.annualized <- Return.annualized(portfolio.return)
print(c(maxDrawdown,sortinoRatio ,Return.annualized ))
#-(20*Return.annualized+10*sortinoRatio-maxDrawdown)
return(-Return.annualized)
}
monitor <- function(obj) {
print("-------------------------------------------------------")
print(class(obj))
print(obj)
print("--------------------------------------------------------")
}
rbga.results <-  rbga(c(150, 50, 0.5, 3.1), c(250, 150, 3, 5),popSize = 12,iters = 40,
evalFunc=evalFunc,monitorFunc = monitor, verbose=TRUE, mutationChance=0.2)
library(genalg)
evalFunc <- function(string=c()) {
assets.id <- c('GZ5Y', 'GZ7Y')
init(assets.id, TRUE,'2011-06-01','2014-06-01')
s0(round(string[1]))
status <- c(CLOSED)
a <- c(round(string[1]),round(string[2]),round(string[3],1),round(string[4],1))
print(a)
while (status[1] != TERMINAL) {
tmp <- step(status, a)
status <- tmp[1]
}
price.return <- na.omit(Return.calculate(self$sample))
portfolio.return <- Return.portfolio(price.return, weights = lag(self$weight), geometric = F)
maxDrawdown <- maxDrawdown(portfolio.return)
sortinoRatio <- SortinoRatio(portfolio.return)
Return.annualized <- Return.annualized(portfolio.return)
print(c(maxDrawdown,sortinoRatio ,Return.annualized ))
#-(20*Return.annualized+10*sortinoRatio-maxDrawdown)
return(-Return.annualized)
}
monitor <- function(obj) {
print("-------------------------------------------------------")
print(class(obj))
print(obj)
print("--------------------------------------------------------")
}
rbga.results <-  rbga(c(150, 50, 0.5, 3.1), c(250, 150, 3, 5),popSize = 12,iters = 40,
evalFunc=evalFunc,monitorFunc = monitor, verbose=TRUE, mutationChance=0.2)
library(genalg)
evalFunc <- function(string=c()) {
assets.id <- c('GZ5Y', 'GZ7Y')
init(assets.id, TRUE,'2010-06-01','2012-06-01')
s0(round(string[1]))
status <- c(CLOSED)
a <- c(round(string[1]),round(string[2]),round(string[3],1),round(string[4],1))
print(a)
while (status[1] != TERMINAL) {
tmp <- step(status, a)
status <- tmp[1]
}
price.return <- na.omit(Return.calculate(self$sample))
portfolio.return <- Return.portfolio(price.return, weights = lag(self$weight), geometric = F)
maxDrawdown <- maxDrawdown(portfolio.return)
sortinoRatio <- SortinoRatio(portfolio.return)
Return.annualized <- Return.annualized(portfolio.return)
print(c(maxDrawdown,sortinoRatio ,Return.annualized ))
#-(20*Return.annualized+10*sortinoRatio-maxDrawdown)
return(-Return.annualized)
}
monitor <- function(obj) {
print("-------------------------------------------------------")
print(class(obj))
print(obj)
print("--------------------------------------------------------")
}
rbga.results <-  rbga(c(150, 50, 0.5, 3.1), c(250, 150, 3, 5),popSize = 12,iters = 40,
evalFunc=evalFunc,monitorFunc = monitor, verbose=TRUE, mutationChance=0.2)
library(genalg)
evalFunc <- function(string=c()) {
assets.id <- c('GZ5Y', 'GZ7Y')
init(assets.id, TRUE,'2011-06-01','2013-06-01')
s0(round(string[1]))
status <- c(CLOSED)
a <- c(round(string[1]),round(string[2]),round(string[3],1),round(string[4],1))
print(a)
while (status[1] != TERMINAL) {
tmp <- step(status, a)
status <- tmp[1]
}
price.return <- na.omit(Return.calculate(self$sample))
portfolio.return <- Return.portfolio(price.return, weights = lag(self$weight), geometric = F)
maxDrawdown <- maxDrawdown(portfolio.return)
sortinoRatio <- SortinoRatio(portfolio.return)
Return.annualized <- Return.annualized(portfolio.return)
print(c(maxDrawdown,sortinoRatio ,Return.annualized ))
#-(20*Return.annualized+10*sortinoRatio-maxDrawdown)
return(-Return.annualized)
}
monitor <- function(obj) {
print("-------------------------------------------------------")
print(class(obj))
print(obj)
print("--------------------------------------------------------")
}
rbga.results <-  rbga(c(150, 50, 0.5, 3.1), c(250, 150, 3, 5),popSize = 12,iters = 40,
evalFunc=evalFunc,monitorFunc = monitor, verbose=TRUE, mutationChance=0.2)
library(genalg)
evalFunc <- function(string=c()) {
assets.id <- c('GZ5Y', 'GZ7Y')
init(assets.id, TRUE,'2012-06-01','2014-06-01')
s0(round(string[1]))
status <- c(CLOSED)
a <- c(round(string[1]),round(string[2]),round(string[3],1),round(string[4],1))
print(a)
while (status[1] != TERMINAL) {
tmp <- step(status, a)
status <- tmp[1]
}
price.return <- na.omit(Return.calculate(self$sample))
portfolio.return <- Return.portfolio(price.return, weights = lag(self$weight), geometric = F)
maxDrawdown <- maxDrawdown(portfolio.return)
sortinoRatio <- SortinoRatio(portfolio.return)
Return.annualized <- Return.annualized(portfolio.return)
print(c(maxDrawdown,sortinoRatio ,Return.annualized ))
#-(20*Return.annualized+10*sortinoRatio-maxDrawdown)
return(-Return.annualized)
}
monitor <- function(obj) {
print("-------------------------------------------------------")
print(class(obj))
print(obj)
print("--------------------------------------------------------")
}
rbga.results <-  rbga(c(150, 50, 0.5, 3.1), c(250, 150, 3, 5),popSize = 12,iters = 40,
evalFunc=evalFunc,monitorFunc = monitor, verbose=TRUE, mutationChance=0.2)
setwd("C:/Users/admin/Desktop/ä¸ä¸æ¯è®¾/Working/R")
JohansenTest <- function(formula){
prices <- model.frame(formula)
# browser()
varest <- VAR(prices,p=1,type="const",lag.max=24, ic="SC")
# in the Johansen procedure for cointegration a lagged VAR (VECM) is used. Hence we need to subtract 1 from the optimal VAR lag length.
lagLength <- max(2,varest$p-1)
# Perform Johansen procedure for cointegration
# Allow intercepts in the cointegrating vector: data without zero mean
# Use trace statistic (null hypothesis: number of cointegrating vectors <= r)
res <- ca.jo(prices,type="trace",ecdet="const",K=lagLength,spec="longrun")
coef <- res@V[1:2,which.max(res@lambda)]
coef <- coef/coef[1]
return(list(coef=c(0, coef[2])))
}
