m <- paste(m,"*",y)
r <- paste(m,collapse="+")
#combin the function
fbody <- paste("{ return(",r,")}")
f <- function(a) {}
#fill the function's body
body(f) <- parse(text=fbody)
return(f)
}
a=4:6
b=c(10, 5.25, 1)
f <- LagrangePolynomial(a,b)
f
f(18)
f(20)
f(1)
f
len = length(x)
x
y
xx <- paste("(","a -",x,")")
m <- c(rep(0,len))
xx
x = c(4,5,6,7)
y = c(10,5.25,1,2)
x
y
xx <- paste("(","a -",x,")")
m <- c(rep(0,len))
xx
x
i
j
i <- 2
i <- 1
j <- 2
td <- td*(x - x[j])
td
len
len = length(x)
#pretreat data abd alloc memery
xx <- paste("(","a -",x,")")
m <- c(rep(0,len))
xx
m
td <- 1
tm <- "1"
td <- td*(x - x[j])
td
j
x
xx[j]
j <- 3
td <- td*(x - x[j])
tm <- paste(tm,"*",xx[j])
tm
j <- 4
td <- td*(x - x[j])
tm <- paste(tm,"*",xx[j])
tm
i
x=c(1,2,3,4)
y=c(10,20,30,40)
len = length(x)
xx <- paste("(","a -",x,")")
m <- c(rep(0,len))
xx
td <- 1
tm <- "1"
i=1
j=2
tm <- paste(tm,"*",xx[j])
tm
j <- 3
tm <- paste(tm,"*",xx[j])
tm
j=4
tm <- paste(tm,"*",xx[j])
tm
x
x[j]-x
x
x[i]-x
(x[i]-x)[-1]
(x[i]-x)[-i]
#combin express
for(i in 1:len) {
tm <- "1"
for(j in 1:len) {
if(i != j) {
tm <- paste(tm,"*",xx[j])
}
}
td <- (x[i]-x)[-i]
tm <- paste(tm,"/",td)
m[i]<-tm
}
xx <- paste("(","a -",x,")")
m <- c(rep(0,len))
tm <- "1"
for(j in 1:len) {
if(i != j) {
tm <- paste(tm,"*",xx[j])
}
}
tm
td <- (x[i]-x)[-i]
td
i
i <- 1
tm <- "1"
for(j in 1:len) {
if(i != j) {
tm <- paste(tm,"*",xx[j])
}
}
td <- (x[i]-x)[-i]
tm <- paste(tm,"/",td)
td
tm
tm
tm <- "1"
for(j in 1:len) {
if(i != j) {
tm <- paste(tm,"*",xx[j])
}
}
td <- (x[i]-x)[-i]
tm
td
factor(td)
td
td <- prod((x[i]-x)[-i])
td
tm <- paste(tm,"/",td)
tm
m[i]<-tm
m <- c(rep(0,len))
#combin express
for(i in 1:len) {
tm <- "1"
for(j in 1:len) {
if(i != j) {
tm <- paste(tm,"*",xx[j])
}
}
td <- prod((x[i]-x)[-i])
tm <- paste(tm,"/",td)
m[i]<-tm
}
m
y
paste(m,"*",y)
m <- paste(m,"*",y)
r <- paste(m,collapse="+")
m
r
fbody <- paste("{ return(",r,")}")
f <- function(a) {}
#fill the function's body
body(f) <- parse(text=fbody)
f
f(10)
f(2)
f(12)
aa <- c(1,2,3)
rank(aa)
aa <- c(1,2,3,2)
rank(aa)
table(aa)
table(aa)>1
any(table(aa)>1)
all(table(aa)>1)
a=c(1,2,3,4)
b=c(10,20,30,40)
f <- LagrangePolynomial(a,b)
f(1.5)
LagrangePolynomial <- function(x,y) {
len <- length(x)
if(len != length(y))
stop("Length not equal!")
if(len < 2)
stop("Dim size must be more than 1!")
if(any(table(x)>1))
stop("Number cannot be same!")
#Initialize each term
xx <- paste("(","a -",x,")")
m <- c(rep(0,len))
#Generate each term
for(i in 1:len) {
numerator <- "1"
for(j in 1:len) {
if(i != j) {
numerator <- paste(numerator,"*",xx[j])
}
}
denominator <- prod((x[i]-x)[-i])
numerator <- paste(numerator,"/",denominator)
m[i]<-numerator
}
#Combine the exrpession
m <- paste(m,"*",y)
r <- paste(m,collapse="+")
#Construct the function
fbody <- paste("{ return(",r,")}")
f <- function(a) {}
#Fill the function's body
body(f) <- parse(text=fbody)
return(f)
}
a=c(1,2,3,4)
b=c(10,20,30,40)
f <- LagrangePolynomial(a,b)
f(1.5)
read.csv("table.csv")
getwd
getwd()
setwd( "C:/Users/admin/Desktop")
read.csv("table.csv")
table <- read.csv("table.csv")
tabe
table
table[1]
class(table)
View(table)
table <- read.csv("table.csv",sep = "\t")
table
score <- rep(0,nrow(table))
score
View(table)
(length(table)-1)
table <- table[,-1]
score <- rep(0,nrow(table))
table
table[1]
table
length(which(!is.na(table[j])))
length(which(!is.na(table[1])))
length(which(!is.na(table[2])))
length(which(!is.na(table[4])))
length(which(!is.na(table[3])))
table
table[j][which(!is.na(table[j]))]
table[2][which(!is.na(table[2]))]
table[2,][which(!is.na(table[2]))]
table[which(!is.na(table[2])),2]
table[which(!is.na(table[3])),3]
table
table <- read.csv("table.csv",sep = "\t")
table <- table[,-1]
score <- rep(0,nrow(table))
scoreTable <- data.frame()
for(j in 2:(length(table)-1))
{
score[which.max(table[which(!is.na(table[j])),j])] <- score[which.max(table[which(!is.na(table[j])),j])] + 1
scoreTable[j-1] <- score
}
table <- read.csv("table.csv",sep = "\t")
table <- table[,-1]
score <- rep(0,nrow(table))
scoreTable <- data.frame()
table
j <- 2
score[which.max(table[which(!is.na(table[j])),j])] <- score[which.max(table[which(!is.na(table[j])),j])] + 1
scoreTable[j-1] <- score
table <- read.csv("table.csv",sep = "\t")
table <- table[,-1]
score <- rep(0,nrow(table))
scoreTable <- data.frame()
score
j <- 1
j <- 2
score[which.max(table[which(!is.na(table[j])),j])] <- score[which.max(table[which(!is.na(table[j])),j])] + 1
score
scoreTable[j-1,] <- score
scoreTable
scoreTable <- table
scoreTable
for(j in 2:(length(table)-1))
{
score[which.max(table[which(!is.na(table[j])),j])] <- score[which.max(table[which(!is.na(table[j])),j])] + 1
scoreTable[j,] <- score
}
scoreTable
any(table)
table
score(score)
table[table]
scoreTable <- table
scoreTable
scoreTable[which(scoreTable)]
scoreTable[which(scoreTable),]
scoreTable[which(!is.na(scoreTable))]
scoreTable[which(!is.na(scoreTable)),]
scoreTable <- as.matrix(table)
scoreTable
scoreTable[which(!is.na(scoreTable))] <- 0
scoreTable
table <- read.csv("table.csv",sep = "\t")
table <- table[,-1]
score <- rep(0,nrow(table))
scoreTable <- as.matrix(table)
scoreTable[which(!is.na(scoreTable))] <- 0
for(j in 2:(length(table)-1))
{
score[which.max(table[which(!is.na(table[j])),j])] <- score[which.max(table[which(!is.na(table[j])),j])] + 1
scoreTable[j-1,] <- score/(j-1)
}
table <- read.csv("table.csv",sep = "\t")
table <- table[,-1]
score <- rep(0,nrow(table))
scoreTable <- as.matrix(table)
scoreTable[which(!is.na(scoreTable))] <- 0
j <- 2
score[which.max(table[which(!is.na(table[j])),j])] <- score[which.max(table[which(!is.na(table[j])),j])] + 1
score
scoreTable[,j-1] <- score/(j-1)
scoreTable
table <- read.csv("table.csv",sep = "\t")
table <- table[,-1]
score <- rep(0,nrow(table))
scoreTable <- as.matrix(table)
scoreTable[which(!is.na(scoreTable))] <- 0
for(j in 2:(length(table)-1))
{
score[which.max(table[which(!is.na(table[j])),j])] <- score[which.max(table[which(!is.na(table[j])),j])] + 1
scoreTable[,j-1] <- score/(j-1)
}
scoreTable
j <- 2
table <- read.csv("table.csv",sep = "\t")
table <- table[,-1]
score <- rep(0,nrow(table))
scoreTable <- as.matrix(table)
scoreTable[which(!is.na(scoreTable))] <- 0
score[which.max(table[which(!is.na(table[j])),j])]
score
[which(!is.na(table[j])),j]
which.max(table[which(!is.na(table[j])),j])
table[j]
which(!is.na(table[j]))
table[which(!is.na(table[j])),j]
which.max(table[which(!is.na(table[j])),j][1:j])
table <- read.csv("table.csv",sep = "\t")
table <- table[,-1]
score <- rep(0,nrow(table))
scoreTable <- as.matrix(table)
scoreTable[which(!is.na(scoreTable))] <- 0
for(j in 2:(length(table)-1))
{
score[which.max(table[which(!is.na(table[j])),j][1:j])] <- score[which.max(table[which(!is.na(table[j])),j][1:j])] + 1
scoreTable[,j-1] <- score/(j-1)
}
scoreTable
table <- read.csv("table.csv",sep = "\t")
table <- table[,-1]
score <- rep(0,nrow(table))
scoreTable <- as.matrix(table)
scoreTable[which(!is.na(scoreTable))] <- 0
for(j in 2:(length(table)-1))
{
score[which.max(table[which(!is.na(table[j])),j][1:j])] <- score[which.max(table[which(!is.na(table[j])),j][1:j])] + 1
scoreTable[,j-1] <- score/(j-1)[1:j]
}
scoreTable
table <- read.csv("table.csv",sep = "\t")
table <- table[,-1]
score <- rep(0,nrow(table))
scoreTable <- as.matrix(table)
scoreTable[which(!is.na(scoreTable))] <- 0
j  <- 2
score[which.max(table[which(!is.na(table[j])),j][1:j])] <- score[which.max(table[which(!is.na(table[j])),j][1:j])] + 1
scor
score
score/(j-1)
which(score/(j-1))
scoreTable[1:j,j-1] <- score/(j-1)[1:j]
scoreTable[1:j,j-1]
score/(j-1)[1:j]
score/(j-1)
(score/(j-1))[1:j]
scoreTable[1:j,j-1] <- (score/(j-1))[1:j]
table <- read.csv("table.csv",sep = "\t")
table <- table[,-1]
score <- rep(0,nrow(table))
scoreTable <- as.matrix(table)
scoreTable[which(!is.na(scoreTable))] <- 0
for(j in 2:(length(table)-1))
{
score[which.max(table[which(!is.na(table[j])),j][1:j])] <- score[which.max(table[which(!is.na(table[j])),j][1:j])] + 1
scoreTable[1:j,j-1] <- (score/(j-1))[1:j]
}
scoreTable
length(table)
length(table-2)
path <- 0
for(j in 1:(length(table)-2))
{
path <- c(path,which.max(table[,j]))
}
path
path <- 0
for(j in 1:(length(scoreTable)-2))
{
path <- c(path,which.max(scoreTable[,j]))
}
path <- 0
for(j in 1:(length(scoreTable)-2))
{
path <- c(path,which.max(scoreTable[,j]))
}
path <- 0
length(scoreTable)-2
path <- 0
for(j in 1:(ncol(scoreTable)-2))
{
path <- c(path,which.max(scoreTable[,j]))
}
path
max(which(scoreTable[,j]==max(scoreTable[,j])))
j
j <- 1
max(which(scoreTable[,j]==max(scoreTable[,j])))
j <- 2
scoreTable
max(scoreTable[,j])
max(which(scoreTable[,j]==max(na.omit(scoreTable[,j])))
max(which(scoreTable[,j]==max(na.omit(scoreTable[,j]))))
table <- read.csv("table.csv",sep = "\t")
table <- table[,-1]
score <- rep(0,nrow(table))
scoreTable <- as.matrix(table)
scoreTable[which(!is.na(scoreTable))] <- 0
for(j in 2:(length(table)-1))
{
score[which.max(table[which(!is.na(table[j])),j][1:j])]
<- score[which.max(table[which(!is.na(table[j])),j][1:j])] + 1
scoreTable[1:j,j-1] <- (score/(j-1))[1:j]
}
path <- 0
for(j in 1:(ncol(scoreTable)-2))
{
path <- c(path,max(which(scoreTable[,j]==max(na.omit(scoreTable[,j])))))
}
table <- read.csv("table.csv",sep = "\t")
table <- table[,-1]
score <- rep(0,nrow(table))
scoreTable <- as.matrix(table)
scoreTable[which(!is.na(scoreTable))] <- 0
for(j in 2:(length(table)-1))
{
score[which.max(table[which(!is.na(table[j])),j][1:j])] <- score[which.max(table[which(!is.na(table[j])),j][1:j])] + 1
scoreTable[1:j,j-1] <- (score/(j-1))[1:j]
}
path <- 0
for(j in 1:(ncol(scoreTable)-2))
{
path <- c(path,max(which(scoreTable[,j]==max(na.omit(scoreTable[,j])))))
}
path
scoreTable
path <- c()
for(j in 1:(ncol(scoreTable)-2))
{
path <- c(path,max(which(scoreTable[,j]==max(na.omit(scoreTable[,j])))))
}
path
series <- c(1:10,9:3,3:80,80:50,50:100,90)
CR <- series
plot(CR)
drawdowns <- c()
for(i in 1:length(series))
{
drawdown <- 1-min(series[i:length(series)])/max(series[1:i])
drawdowns <- c(drawdowns,drawdown)
}
drawdowns
plot(drawdowns)
plot(-drawdowns)
plot(-drawdowns)
series <- c(1:10,9:3,3:20,20:(-20),(-20):40)
drawdowns <- c()
for(i in 1:length(series))
{
drawdown <- 1-min(series[i:length(series)])/max(series[1:i])
drawdowns <- c(drawdowns,drawdown)
}
plot(drawdowns)
series <- c(1:10,9:3,3:20,20:(-20),(-20):40)
CR <- series
drawdowns <- c()
for(i in 1:length(series))
{
drawdown <- 1-min(series[i:length(series)])/max(series[1:i])
drawdowns <- c(drawdowns,drawdown)
}
plot(series)
series <- c(1:10,9:3,3:20,20:(-20),(-20):40)
CR <- series
drawdowns <- c()
for(i in 1:length(series))
{
drawdown <- 1-series[i]/max(series[1:i])
drawdowns <- c(drawdowns,drawdown)
}
drawdowns
plot(drawdowns)
plot(-drawdowns)
plot(CR)
shiny::runApp('shinyapp')
shiny::runApp('shinyapp',8080)
shiny::runApp('shinyapp',8080)
